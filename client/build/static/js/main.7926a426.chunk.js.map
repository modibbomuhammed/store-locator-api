{"version":3,"sources":["reducer/rootReducer.js","components/Search-component.js","action/actionCreators.js","action/actionTypes.js","components/Store-list.js","components/MapWrapper.js","App.js","serviceWorker.js","index.js"],"names":["initialState","stores","connect","sendStores","payload","type","useState","postCode","setPostCode","findStores","a","string","process","node_env","axios","get","result","data","className","id","value","placeholder","autoFocus","style","padding","onChange","e","target","backgroundColor","color","onClick","state","listOfStores","map","val","index","ash","opening_time","split","key","location","address_three","marginLeft","display","justifyContent","marginRight","Math","floor","distance","flexBasis","paddingRight","markers","lat","long","phone_number","Marker","position","Popup","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","App","Boolean","window","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7926a426.chunk.js","sourcesContent":["import { loadStores } from \"../action/actionTypes\";\r\n\r\nconst initialState = {\r\n  stores: [],\r\n};\r\nexport function reducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case loadStores:\r\n      return { stores: payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendStores } from '../action/actionCreators';\r\nimport axios from 'axios';\r\n\r\nconst SearchComponent = ({ sendStores }) => {\r\n  // useEffect(() => {\r\n  //   axios\r\n  //     .get('http://localhost:3000/api/store/closest?post_code=de232qh')\r\n  //     .then(res => console.log(res.data));\r\n  // }, []);\r\n  const [postCode, setPostCode] = useState('');\r\n  const findStores = async () => {\r\n    const string =\r\n      process.env.node_env === 'production'\r\n        ? `/api/store/closest?post_code=${postCode}`\r\n        : `http://localhost:3000/api/store/closest?post_code=${postCode}`;\r\n    const result = await axios.get(string);\r\n    sendStores(result.data);\r\n    setPostCode('');\r\n  };\r\n  return (\r\n    <div className=\"search-wrapper ui action input\">\r\n      <input\r\n        id=\"search\"\r\n        type=\"text\"\r\n        value={postCode}\r\n        placeholder=\"Enter your postcode\"\r\n        autoFocus\r\n        style={{ padding: '12px' }}\r\n        onChange={e => setPostCode(e.target.value)}\r\n      />\r\n      <button\r\n        className=\"ui button\"\r\n        style={{ backgroundColor: '#58B2B5', color: 'white' }}\r\n        onClick={() => findStores()}\r\n      >\r\n        Search for store\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { sendStores })(SearchComponent);\r\n","import { loadStores } from \"./actionTypes\";\r\nexport function sendStores(payload) {\r\n  return {\r\n    type: loadStores,\r\n    payload,\r\n  };\r\n}\r\n","export const loadStores = \"loadStores\";\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Storelist = ({ stores }) => {\r\n  const listOfStores = stores.map((val, index) => {\r\n    const ash = val.opening_time.split(';')[0].split('-')[1];\r\n    return (\r\n      <div key={index}>\r\n        <div className=\"title\">\r\n          <h3>\r\n            <span className=\"index\">{index + 1}.</span>Payzone\r\n          </h3>\r\n          <i className=\"fas fa-angle-down\"></i>\r\n        </div>\r\n\r\n        <div className=\"bottom\">\r\n          <div className=\"addy\">{val.location.address_three}</div>\r\n          <div className=\"details\">\r\n            <span className=\"close\">\r\n              <i\r\n                className=\"fas fa-clock\"\r\n                style={{ color: 'blue', marginLeft: '4px' }}\r\n              ></i>\r\n              <p style={{ display: 'inline-block', marginLeft: '4px' }}>\r\n                Open until {ash}\r\n              </p>\r\n            </span>\r\n            <span\r\n              className=\"distance\"\r\n              style={{ display: 'flex', justifyContent: 'space-between' }}\r\n            >\r\n              <i\r\n                className=\"fas fa-map-marker-alt\"\r\n                style={{ color: 'blue' }}\r\n              ></i>\r\n              <p\r\n                style={{\r\n                  display: 'inline-block',\r\n                  marginLeft: '4px',\r\n                  marginRight: '4px',\r\n                }}\r\n              >\r\n                {Math.floor(val.distance)} Miles\r\n              </p>\r\n              <i className=\"fas fa-walking\"></i>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div style={{ flexBasis: '30%' }} className=\"content-wrapper\">\r\n      <div className=\"store-list\">\r\n        <h2>Closest Stores</h2>\r\n        <p>To get the closest stores, enter your postcode.</p>\r\n        <div\r\n          className=\"ui styled fluid accordion\"\r\n          style={{ paddingRight: '13px' }}\r\n        >\r\n          {/* <div className=\"title\" style={{ display: \"flex\" }}>\r\n            <h4 style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              1. Wonderland store\r\n              <i className=\"dropdown icon\"></i>\r\n            </h4>\r\n          </div> */}\r\n\r\n          {/* <div className=\"content\">\r\n            <p\r\n              className=\"transition visible\"\r\n              style={{ display: 'block !important' }}\r\n            >\r\n              store details\r\n            </p>\r\n          </div> */}\r\n          {listOfStores}\r\n          {/* <div className=\"title\">\r\n            <i className=\"dropdown icon\"></i>\r\n            What kinds of dogs are there?\r\n          </div>\r\n          <div className=\"content\">\r\n            <p>\r\n              There are many breeds of dogs. Each breed varies in size and\r\n              temperament. Owners often select a breed of dog that they find to\r\n              be compatible with their own lifestyle and desires from a\r\n              companion.\r\n            </p>\r\n          </div>\r\n          <div className=\"title\">\r\n            <i className=\"dropdown icon\"></i>\r\n            How do you acquire a dog?\r\n          </div>\r\n          <div className=\"content\">\r\n            <p>\r\n              Three common ways for a prospective owner to acquire a dog is from\r\n              pet shops, private owners, or shelters.\r\n            </p>\r\n            <p>\r\n              A pet shop may be the most convenient way to buy a dog. Buying a\r\n              dog from a private owner allows you to assess the pedigree and\r\n              upbringing of your dog before choosing to take it home. Lastly,\r\n              finding your dog from a shelter, helps give a good home to a dog\r\n              who may not find one so readily.\r\n            </p>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return state;\r\n}\r\n\r\nexport default connect(mapStateToProps)(Storelist);\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { connect } from 'react-redux';\r\n\r\nconst MapWrapper = ({ stores }) => {\r\n  const markers = stores.map(\r\n    ({ location: { lat, long, id, address_three }, phone_number }) => (\r\n      <Marker key={id} position={[lat, long]}>\r\n        <Popup>\r\n          Payzone. <br /> {`${address_three} ${phone_number}`}\r\n        </Popup>\r\n      </Marker>\r\n    ),\r\n  );\r\n\r\n  return (\r\n    <div style={{ flexBasis: '70%' }}>\r\n      {/* <img src=\"/map.png\" alt=\"\" /> */}\r\n      <MapContainer center={[51.505, -0.09]} zoom={9} scrollWheelZoom={false}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {/* <Marker position={[51.505, -0.09]}>\r\n          <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n        </Marker> */}\r\n        {markers}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return state;\r\n}\r\n\r\nexport default connect(mapStateToProps)(MapWrapper);\r\n","import React from 'react';\nimport './App.css';\nimport SearchComponent from './components/Search-component';\nimport StoreList from './components/Store-list';\nimport MapWrapper from './components/MapWrapper';\n\n/**\n1. Make the backend server  to serve the static frontend build\n2. The storeList component still need some styling\n3. Load the stores in the map\n*/\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <div className=\"header\">\n        <SearchComponent />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <StoreList />\n        <MapWrapper />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducer } from \"./reducer/rootReducer\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}