{"version":3,"sources":["reducer/rootReducer.js","components/Search-component.js","action/actionCreators.js","action/actionTypes.js","components/Store-list.js","components/MapWrapper.js","App.js","serviceWorker.js","index.js"],"names":["initialState","stores","connect","sendStores","payload","type","useEffect","axios","get","then","res","console","log","data","useState","postCode","setPostCode","findStores","a","result","className","style","width","id","value","placeholder","autoFocus","onChange","e","target","backgroundColor","color","onClick","state","listOfStores","map","val","index","key","location","address_three","opening_time","display","justifyContent","markers","lat","long","phone_number","Marker","position","Popup","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","App","Boolean","window","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91e300a7.chunk.js","sourcesContent":["import { loadStores } from \"../action/actionTypes\";\r\n\r\nconst initialState = {\r\n  stores: [],\r\n};\r\nexport function reducer(state = initialState, { type, payload }) {\r\n  switch (type) {\r\n    case loadStores:\r\n      return { stores: payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendStores } from '../action/actionCreators';\r\nimport axios from 'axios';\r\n\r\nconst SearchComponent = ({ sendStores }) => {\r\n  useEffect(() => {\r\n    axios\r\n      .get('http://localhost:3000/api/store/closest?post_code=de232qh')\r\n      .then(res => console.log(res.data));\r\n  }, []);\r\n  const [postCode, setPostCode] = useState('');\r\n  const findStores = async () => {\r\n    const result = await axios.get(\r\n      `http://localhost:3000/api/store/closest?post_code=${postCode}`,\r\n    );\r\n    sendStores(result.data);\r\n  };\r\n  return (\r\n    <div className=\"search-wrapper ui action input\" style={{ width: '50%' }}>\r\n      <input\r\n        id=\"search\"\r\n        type=\"text\"\r\n        value={postCode}\r\n        placeholder=\"Enter your postcode\"\r\n        autoFocus\r\n        onChange={e => setPostCode(e.target.value)}\r\n      />\r\n      <button\r\n        className=\"ui button\"\r\n        style={{ backgroundColor: '#58B2B5', color: 'white' }}\r\n        onClick={() => findStores()}\r\n      >\r\n        Search for store\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { sendStores })(SearchComponent);\r\n","import { loadStores } from \"./actionTypes\";\r\nexport function sendStores(payload) {\r\n  return {\r\n    type: loadStores,\r\n    payload,\r\n  };\r\n}\r\n","export const loadStores = \"loadStores\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Storelist = ({ stores }) => {\r\n  const listOfStores = stores.map((val, index) => {\r\n    return (\r\n      <div key={index}>\r\n        <div className=\"title\">\r\n          <i className=\"dropdown icon\"></i>\r\n          {val.location.address_three}\r\n        </div>\r\n\r\n        <div className=\"content\">\r\n          <p>{val.opening_time}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"content-wrapper\">\r\n      <div className=\"store-list\">\r\n        <h2>Closest Stores</h2>\r\n        <p>To get the closest stores, enter your postcode.</p>\r\n        <div className=\"ui styled fluid accordion\">\r\n          <div className=\"title\" style={{ display: \"flex\" }}>\r\n            <h4 style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              1. Wonderland store\r\n              <i className=\"dropdown icon\"></i>\r\n            </h4>\r\n          </div>\r\n          <div className=\"content\">\r\n            <p\r\n              className=\"transition visible\"\r\n              style={{ display: \"block !important\" }}\r\n            >\r\n              store details\r\n            </p>\r\n          </div>\r\n          {listOfStores}\r\n          {/* <div className=\"title\">\r\n            <i className=\"dropdown icon\"></i>\r\n            What kinds of dogs are there?\r\n          </div>\r\n          <div className=\"content\">\r\n            <p>\r\n              There are many breeds of dogs. Each breed varies in size and\r\n              temperament. Owners often select a breed of dog that they find to\r\n              be compatible with their own lifestyle and desires from a\r\n              companion.\r\n            </p>\r\n          </div>\r\n          <div className=\"title\">\r\n            <i className=\"dropdown icon\"></i>\r\n            How do you acquire a dog?\r\n          </div>\r\n          <div className=\"content\">\r\n            <p>\r\n              Three common ways for a prospective owner to acquire a dog is from\r\n              pet shops, private owners, or shelters.\r\n            </p>\r\n            <p>\r\n              A pet shop may be the most convenient way to buy a dog. Buying a\r\n              dog from a private owner allows you to assess the pedigree and\r\n              upbringing of your dog before choosing to take it home. Lastly,\r\n              finding your dog from a shelter, helps give a good home to a dog\r\n              who may not find one so readily.\r\n            </p>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return state;\r\n}\r\n\r\nexport default connect(mapStateToProps)(Storelist);\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { connect } from 'react-redux';\r\n\r\nconst MapWrapper = ({ stores }) => {\r\n  const markers = stores.map(\r\n    ({ location: { lat, long, id, address_three }, phone_number }) => (\r\n      <Marker key={id} position={[lat, long]}>\r\n        <Popup>\r\n          Payzone. <br /> {`${address_three} ${phone_number}`}\r\n        </Popup>\r\n      </Marker>\r\n    ),\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* <img src=\"/map.png\" alt=\"\" /> */}\r\n      <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={[51.505, -0.09]}>\r\n          <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n        </Marker>\r\n        {markers}\r\n      </MapContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return state;\r\n}\r\n\r\nexport default connect(mapStateToProps)(MapWrapper);\r\n","import React from 'react';\nimport './App.css';\nimport SearchComponent from './components/Search-component';\nimport StoreList from './components/Store-list';\nimport MapWrapper from './components/MapWrapper';\n\n/**\n1. Make the backend server  to serve the static frontend build\n2. The storeList component still need some styling\n3. Load the stores in the map\n*/\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <div className=\"header\">\n        <SearchComponent />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      >\n        <StoreList />\n        <MapWrapper />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducer } from \"./reducer/rootReducer\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}